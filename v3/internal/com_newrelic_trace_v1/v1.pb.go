// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1.proto

package com_newrelic_trace_v1 // import "github.com/iwanbk/go-agent/v3/internal/com_newrelic_trace_v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpanBatch struct {
	Spans                []*Span  `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpanBatch) Reset()         { *m = SpanBatch{} }
func (m *SpanBatch) String() string { return proto.CompactTextString(m) }
func (*SpanBatch) ProtoMessage()    {}
func (*SpanBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_v1_90a3c8d25965fb38, []int{0}
}
func (m *SpanBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanBatch.Unmarshal(m, b)
}
func (m *SpanBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanBatch.Marshal(b, m, deterministic)
}
func (dst *SpanBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanBatch.Merge(dst, src)
}
func (m *SpanBatch) XXX_Size() int {
	return xxx_messageInfo_SpanBatch.Size(m)
}
func (m *SpanBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SpanBatch proto.InternalMessageInfo

func (m *SpanBatch) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type Span struct {
	TraceId              string                     `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Intrinsics           map[string]*AttributeValue `protobuf:"bytes,2,rep,name=intrinsics,proto3" json:"intrinsics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserAttributes       map[string]*AttributeValue `protobuf:"bytes,3,rep,name=user_attributes,json=userAttributes,proto3" json:"user_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AgentAttributes      map[string]*AttributeValue `protobuf:"bytes,4,rep,name=agent_attributes,json=agentAttributes,proto3" json:"agent_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_v1_90a3c8d25965fb38, []int{1}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span.Unmarshal(m, b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span.Marshal(b, m, deterministic)
}
func (dst *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(dst, src)
}
func (m *Span) XXX_Size() int {
	return xxx_messageInfo_Span.Size(m)
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *Span) GetIntrinsics() map[string]*AttributeValue {
	if m != nil {
		return m.Intrinsics
	}
	return nil
}

func (m *Span) GetUserAttributes() map[string]*AttributeValue {
	if m != nil {
		return m.UserAttributes
	}
	return nil
}

func (m *Span) GetAgentAttributes() map[string]*AttributeValue {
	if m != nil {
		return m.AgentAttributes
	}
	return nil
}

type AttributeValue struct {
	// Types that are valid to be assigned to Value:
	//	*AttributeValue_StringValue
	//	*AttributeValue_BoolValue
	//	*AttributeValue_IntValue
	//	*AttributeValue_DoubleValue
	Value                isAttributeValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AttributeValue) Reset()         { *m = AttributeValue{} }
func (m *AttributeValue) String() string { return proto.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()    {}
func (*AttributeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_v1_90a3c8d25965fb38, []int{2}
}
func (m *AttributeValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttributeValue.Unmarshal(m, b)
}
func (m *AttributeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttributeValue.Marshal(b, m, deterministic)
}
func (dst *AttributeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeValue.Merge(dst, src)
}
func (m *AttributeValue) XXX_Size() int {
	return xxx_messageInfo_AttributeValue.Size(m)
}
func (m *AttributeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeValue.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeValue proto.InternalMessageInfo

type isAttributeValue_Value interface {
	isAttributeValue_Value()
}

type AttributeValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AttributeValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AttributeValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AttributeValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*AttributeValue_StringValue) isAttributeValue_Value() {}

func (*AttributeValue_BoolValue) isAttributeValue_Value() {}

func (*AttributeValue_IntValue) isAttributeValue_Value() {}

func (*AttributeValue_DoubleValue) isAttributeValue_Value() {}

func (m *AttributeValue) GetValue() isAttributeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AttributeValue) GetStringValue() string {
	if x, ok := m.GetValue().(*AttributeValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *AttributeValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*AttributeValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *AttributeValue) GetIntValue() int64 {
	if x, ok := m.GetValue().(*AttributeValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *AttributeValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*AttributeValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AttributeValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AttributeValue_OneofMarshaler, _AttributeValue_OneofUnmarshaler, _AttributeValue_OneofSizer, []interface{}{
		(*AttributeValue_StringValue)(nil),
		(*AttributeValue_BoolValue)(nil),
		(*AttributeValue_IntValue)(nil),
		(*AttributeValue_DoubleValue)(nil),
	}
}

func _AttributeValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AttributeValue)
	// value
	switch x := m.Value.(type) {
	case *AttributeValue_StringValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *AttributeValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *AttributeValue_IntValue:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *AttributeValue_DoubleValue:
		b.EncodeVarint(4<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case nil:
	default:
		return fmt.Errorf("AttributeValue.Value has unexpected type %T", x)
	}
	return nil
}

func _AttributeValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AttributeValue)
	switch tag {
	case 1: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &AttributeValue_StringValue{x}
		return true, err
	case 2: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_BoolValue{x != 0}
		return true, err
	case 3: // value.int_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_IntValue{int64(x)}
		return true, err
	case 4: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &AttributeValue_DoubleValue{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _AttributeValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AttributeValue)
	// value
	switch x := m.Value.(type) {
	case *AttributeValue_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *AttributeValue_BoolValue:
		n += 1 // tag and wire
		n += 1
	case *AttributeValue_IntValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntValue))
	case *AttributeValue_DoubleValue:
		n += 1 // tag and wire
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RecordStatus struct {
	MessagesSeen         uint64   `protobuf:"varint,1,opt,name=messages_seen,json=messagesSeen,proto3" json:"messages_seen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordStatus) Reset()         { *m = RecordStatus{} }
func (m *RecordStatus) String() string { return proto.CompactTextString(m) }
func (*RecordStatus) ProtoMessage()    {}
func (*RecordStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_v1_90a3c8d25965fb38, []int{3}
}
func (m *RecordStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordStatus.Unmarshal(m, b)
}
func (m *RecordStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordStatus.Marshal(b, m, deterministic)
}
func (dst *RecordStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordStatus.Merge(dst, src)
}
func (m *RecordStatus) XXX_Size() int {
	return xxx_messageInfo_RecordStatus.Size(m)
}
func (m *RecordStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RecordStatus proto.InternalMessageInfo

func (m *RecordStatus) GetMessagesSeen() uint64 {
	if m != nil {
		return m.MessagesSeen
	}
	return 0
}

func init() {
	proto.RegisterType((*SpanBatch)(nil), "com.newrelic.trace.v1.SpanBatch")
	proto.RegisterType((*Span)(nil), "com.newrelic.trace.v1.Span")
	proto.RegisterMapType((map[string]*AttributeValue)(nil), "com.newrelic.trace.v1.Span.AgentAttributesEntry")
	proto.RegisterMapType((map[string]*AttributeValue)(nil), "com.newrelic.trace.v1.Span.IntrinsicsEntry")
	proto.RegisterMapType((map[string]*AttributeValue)(nil), "com.newrelic.trace.v1.Span.UserAttributesEntry")
	proto.RegisterType((*AttributeValue)(nil), "com.newrelic.trace.v1.AttributeValue")
	proto.RegisterType((*RecordStatus)(nil), "com.newrelic.trace.v1.RecordStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IngestServiceClient is the client API for IngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestServiceClient interface {
	// Accepts a stream of Span messages, and returns an irregular stream of
	// RecordStatus messages.
	RecordSpan(ctx context.Context, opts ...grpc.CallOption) (IngestService_RecordSpanClient, error)
	// Accepts a stream of SpanBatch messages, and returns an irregular
	// stream of RecordStatus messages. This endpoint can be used to improve
	// throughput when Span messages are small
	RecordSpanBatch(ctx context.Context, opts ...grpc.CallOption) (IngestService_RecordSpanBatchClient, error)
}

type ingestServiceClient struct {
	cc *grpc.ClientConn
}

func NewIngestServiceClient(cc *grpc.ClientConn) IngestServiceClient {
	return &ingestServiceClient{cc}
}

func (c *ingestServiceClient) RecordSpan(ctx context.Context, opts ...grpc.CallOption) (IngestService_RecordSpanClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IngestService_serviceDesc.Streams[0], "/com.newrelic.trace.v1.IngestService/RecordSpan", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestServiceRecordSpanClient{stream}
	return x, nil
}

type IngestService_RecordSpanClient interface {
	Send(*Span) error
	Recv() (*RecordStatus, error)
	grpc.ClientStream
}

type ingestServiceRecordSpanClient struct {
	grpc.ClientStream
}

func (x *ingestServiceRecordSpanClient) Send(m *Span) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestServiceRecordSpanClient) Recv() (*RecordStatus, error) {
	m := new(RecordStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ingestServiceClient) RecordSpanBatch(ctx context.Context, opts ...grpc.CallOption) (IngestService_RecordSpanBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IngestService_serviceDesc.Streams[1], "/com.newrelic.trace.v1.IngestService/RecordSpanBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingestServiceRecordSpanBatchClient{stream}
	return x, nil
}

type IngestService_RecordSpanBatchClient interface {
	Send(*SpanBatch) error
	Recv() (*RecordStatus, error)
	grpc.ClientStream
}

type ingestServiceRecordSpanBatchClient struct {
	grpc.ClientStream
}

func (x *ingestServiceRecordSpanBatchClient) Send(m *SpanBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingestServiceRecordSpanBatchClient) Recv() (*RecordStatus, error) {
	m := new(RecordStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngestServiceServer is the server API for IngestService service.
type IngestServiceServer interface {
	// Accepts a stream of Span messages, and returns an irregular stream of
	// RecordStatus messages.
	RecordSpan(IngestService_RecordSpanServer) error
	// Accepts a stream of SpanBatch messages, and returns an irregular
	// stream of RecordStatus messages. This endpoint can be used to improve
	// throughput when Span messages are small
	RecordSpanBatch(IngestService_RecordSpanBatchServer) error
}

func RegisterIngestServiceServer(s *grpc.Server, srv IngestServiceServer) {
	s.RegisterService(&_IngestService_serviceDesc, srv)
}

func _IngestService_RecordSpan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestServiceServer).RecordSpan(&ingestServiceRecordSpanServer{stream})
}

type IngestService_RecordSpanServer interface {
	Send(*RecordStatus) error
	Recv() (*Span, error)
	grpc.ServerStream
}

type ingestServiceRecordSpanServer struct {
	grpc.ServerStream
}

func (x *ingestServiceRecordSpanServer) Send(m *RecordStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestServiceRecordSpanServer) Recv() (*Span, error) {
	m := new(Span)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IngestService_RecordSpanBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestServiceServer).RecordSpanBatch(&ingestServiceRecordSpanBatchServer{stream})
}

type IngestService_RecordSpanBatchServer interface {
	Send(*RecordStatus) error
	Recv() (*SpanBatch, error)
	grpc.ServerStream
}

type ingestServiceRecordSpanBatchServer struct {
	grpc.ServerStream
}

func (x *ingestServiceRecordSpanBatchServer) Send(m *RecordStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingestServiceRecordSpanBatchServer) Recv() (*SpanBatch, error) {
	m := new(SpanBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IngestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.newrelic.trace.v1.IngestService",
	HandlerType: (*IngestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordSpan",
			Handler:       _IngestService_RecordSpan_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RecordSpanBatch",
			Handler:       _IngestService_RecordSpanBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1.proto",
}

func init() { proto.RegisterFile("v1.proto", fileDescriptor_v1_90a3c8d25965fb38) }

var fileDescriptor_v1_90a3c8d25965fb38 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xd1, 0x8a, 0xda, 0x4e,
	0x14, 0xc6, 0x1d, 0x75, 0xff, 0xab, 0x47, 0x77, 0x5d, 0xe6, 0xdf, 0x82, 0xb5, 0x94, 0x06, 0xa5,
	0x10, 0x28, 0x4d, 0x56, 0xbd, 0x29, 0x2d, 0x2c, 0x5d, 0xa1, 0xa0, 0xf4, 0x2e, 0xb6, 0xa5, 0xb4,
	0xd0, 0x30, 0xc6, 0x43, 0x1c, 0xaa, 0x13, 0x99, 0x99, 0xa4, 0xec, 0xf3, 0xf4, 0x59, 0xfa, 0x1e,
	0x7d, 0x94, 0x92, 0x19, 0x75, 0x75, 0x71, 0x03, 0xbd, 0xd8, 0xbb, 0xe4, 0x9c, 0xef, 0xfb, 0x7d,
	0x73, 0x06, 0xce, 0x40, 0x2d, 0xeb, 0x7b, 0x6b, 0x99, 0xe8, 0x84, 0x3e, 0x8e, 0x92, 0x95, 0x27,
	0xf0, 0xa7, 0xc4, 0x25, 0x8f, 0x3c, 0x2d, 0x59, 0x84, 0x5e, 0xd6, 0xef, 0x5e, 0x41, 0x7d, 0xba,
	0x66, 0x62, 0xc4, 0x74, 0xb4, 0xa0, 0x7d, 0x38, 0x51, 0x6b, 0x26, 0x54, 0x9b, 0x38, 0x15, 0xb7,
	0x31, 0x78, 0xea, 0x1d, 0xf5, 0x78, 0xb9, 0x21, 0xb0, 0xca, 0xee, 0x9f, 0x2a, 0x54, 0xf3, 0x7f,
	0xfa, 0x04, 0x6a, 0x46, 0x10, 0xf2, 0x79, 0x9b, 0x38, 0xc4, 0xad, 0x07, 0xa7, 0xe6, 0x7f, 0x32,
	0xa7, 0x1f, 0x00, 0xb8, 0xd0, 0x92, 0x0b, 0xc5, 0x23, 0xd5, 0x2e, 0x1b, 0xf6, 0xcb, 0x02, 0xb6,
	0x37, 0xd9, 0xa9, 0xdf, 0x0b, 0x2d, 0x6f, 0x82, 0x3d, 0x3b, 0xfd, 0x02, 0xad, 0x54, 0xa1, 0x0c,
	0x99, 0xd6, 0x92, 0xcf, 0x52, 0x8d, 0xaa, 0x5d, 0x31, 0x44, 0xbf, 0x88, 0xf8, 0x49, 0xa1, 0xbc,
	0xde, 0x39, 0x2c, 0xf5, 0x3c, 0x3d, 0x28, 0xd2, 0x6f, 0x70, 0xc1, 0x62, 0x14, 0x7a, 0x1f, 0x5d,
	0x35, 0xe8, 0xcb, 0x22, 0xf4, 0x75, 0xee, 0xb9, 0xcb, 0x6e, 0xb1, 0xc3, 0x6a, 0x67, 0x0e, 0xad,
	0x3b, 0x53, 0xd1, 0x0b, 0xa8, 0xfc, 0xc0, 0x9b, 0xcd, 0x65, 0xe5, 0x9f, 0xf4, 0x2d, 0x9c, 0x64,
	0x6c, 0x99, 0x62, 0xbb, 0xec, 0x10, 0xb7, 0x31, 0x78, 0x71, 0x4f, 0xec, 0x0e, 0xfb, 0x39, 0x17,
	0x07, 0xd6, 0xf3, 0xa6, 0xfc, 0x9a, 0x74, 0x16, 0xf0, 0xff, 0x91, 0x49, 0x1f, 0x22, 0x89, 0xc3,
	0xa3, 0x63, 0x83, 0x3f, 0x40, 0x54, 0xf7, 0x17, 0x81, 0xf3, 0xc3, 0x2e, 0xed, 0x41, 0x53, 0xe5,
	0x97, 0x19, 0x87, 0x16, 0x6d, 0xe2, 0xc6, 0xa5, 0xa0, 0x61, 0xab, 0x56, 0xf4, 0x1c, 0x60, 0x96,
	0x24, 0xcb, 0xf0, 0x36, 0xbd, 0x36, 0x2e, 0x05, 0xf5, 0xbc, 0x66, 0x05, 0xcf, 0xa0, 0xce, 0x85,
	0xde, 0xf4, 0x2b, 0x0e, 0x71, 0x2b, 0xe3, 0x52, 0x50, 0xe3, 0x42, 0xef, 0x42, 0xe6, 0x49, 0x3a,
	0x5b, 0xe2, 0x46, 0x51, 0x75, 0x88, 0x4b, 0xf2, 0x10, 0x5b, 0x35, 0xa2, 0xd1, 0xe9, 0x66, 0xba,
	0xee, 0x10, 0x9a, 0x01, 0x46, 0x89, 0x9c, 0x4f, 0x35, 0xd3, 0xa9, 0xa2, 0x3d, 0x38, 0x5b, 0xa1,
	0x52, 0x2c, 0x46, 0x15, 0x2a, 0x44, 0x61, 0xce, 0x58, 0x0d, 0x9a, 0xdb, 0xe2, 0x14, 0x51, 0x0c,
	0x7e, 0x13, 0x38, 0x9b, 0x88, 0x18, 0x95, 0x9e, 0xa2, 0xcc, 0x78, 0x84, 0xf4, 0x23, 0xc0, 0x06,
	0x93, 0x2f, 0x55, 0xd1, 0x06, 0x76, 0x7a, 0xf7, 0x34, 0xf7, 0x8f, 0xd1, 0x2d, 0xb9, 0xe4, 0x92,
	0xd0, 0xef, 0xd0, 0xba, 0xa5, 0xda, 0x5d, 0x77, 0x0a, 0xd0, 0x46, 0xf1, 0x0f, 0xfc, 0xd1, 0xbb,
	0xaf, 0x57, 0x31, 0xd7, 0x8b, 0x74, 0x96, 0x5b, 0xfc, 0xad, 0xc5, 0x8f, 0x93, 0x57, 0x66, 0x0f,
	0xfc, 0x6c, 0xe8, 0x73, 0xa1, 0x51, 0x0a, 0xb6, 0xf4, 0xa3, 0x64, 0x15, 0x6e, 0x15, 0xa1, 0x7d,
	0x32, 0xb2, 0xfe, 0xec, 0x3f, 0xf3, 0x4a, 0x0d, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x0f,
	0xf5, 0xd4, 0xb1, 0x04, 0x00, 0x00,
}
